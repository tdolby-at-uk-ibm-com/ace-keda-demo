apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ace-keda-demo-build
spec:
  # The security and environment settings are needed for OpenShift in a non-default
  # namespace such as cp4i. Kaniko is expecting to be root in the container.
  stepTemplate:
    securityContext:
      runAsUser: 0
    env:
      - name: "HOME"
        value: "/tekton/home"
      - name: "LICENSE"
        value: "accept"
  params:
    - name: outputRegistry
      type: string
    - name: url
      type: string
    - name: revision
      type: string
    - name: runtimeBaseImage
      type: string
  results:
    - name: tag
      description: image tag of the form 20240220135127-6fe9106
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      script: |
        #!/bin/sh
        set -x
        set -e # Fail on error
        cd /work
        git clone -b $(params.revision) $(params.url)
        cd ace-keda-demo
        export DATE=$(date '+%Y%m%d%H%M%S')
        export COMMIT=$(git log -1 --pretty=%h)
        export TAG="$DATE"-"$COMMIT"
        echo Setting container tag to "$TAG"
        echo -n "$TAG" > $(results.tag.path)

        # Slightly hacky but works . . . 
        chmod -R 777 /work/ace-keda-demo
      volumeMounts:
        - mountPath: /work
          name: work
    - name: ibmint-build
      image: $(params.runtimeBaseImage)
      #image: cp.icr.io/cp/appc/ace:12.0.11.0-r1
      #
      # Runs the build and unit test phases, leaving the results in the work directory
      # for later steps.
      #
      script: |
        #!/bin/bash
        
        export LICENSE=accept
        . /opt/ibm/ace-13/server/bin/mqsiprofile
        
        set -e # Fail on error - this must be done after the profile in case the container has the profile loaded already

        cd /work/ace-keda-demo
        mkdir -p /work/ibmint-output/home/aceuser
        mqsicreateworkdir /work/ibmint-output/home/aceuser/ace-server
        # Using --compile-maps-and-schemas for 12.0.11 and later . . . 
        ibmint deploy --input-path . --output-work-directory /work/ibmint-output/home/aceuser/ace-server --project ConsumeMQ --project DefaultPolicies --compile-maps-and-schemas 
        ibmint optimize server --work-dir /work/ibmint-output/home/aceuser/ace-server --disable NodeJS
      volumeMounts:
        - mountPath: /work
          name: work
    - name: next-stage-container-setup
      image: $(params.runtimeBaseImage)
      script: |
        #!/bin/bash
        cd /work/ibmint-output/home/aceuser
        cp /work/ace-keda-demo/tekton/Dockerfile Dockerfile
      volumeMounts:
        - mountPath: /work
          name: work
    - name: docker-build-and-push
      image: quay.io/buildah/stable:v1
      #image: registry.redhat.io/rhel8/buildah:8.9-5
      securityContext:
        runAsUser: 0
        # Needed for hostPath volumes on OpenShift
        #privileged: true
        capabilities:
          add: ["CHOWN", "DAC_OVERRIDE","FOWNER","SETFCAP","SETGID","SETUID"]
      # specifying DOCKER_CONFIG is required to allow buildah to detect docker credential
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      script: |
        date
        export TAG=`cat $(results.tag.path)`
        echo Using $TAG as image tag
        find /work
        date
        echo buildah --storage-driver=overlay bud --format=oci --tls-verify=false --no-cache \
          --build-arg BASE_IMAGE=$(params.runtimeBaseImage) \
          -f /work/ibmint-output/home/aceuser/Dockerfile \
          -t $(params.outputRegistry)/ace-keda-demo:$TAG /work/ibmint-output/home/aceuser
        buildah --storage-driver=overlay bud --format=oci --tls-verify=false --no-cache \
          --build-arg BASE_IMAGE=$(params.runtimeBaseImage) \
          -f /work/ibmint-output/home/aceuser/Dockerfile \
          -t $(params.outputRegistry)/ace-keda-demo:$TAG /work/ibmint-output/home/aceuser
        date
        buildah  --storage-driver=overlay push --tls-verify=false --digestfile /tmp/image-digest \
          $(params.outputRegistry)/ace-keda-demo:$TAG  "docker://$(params.outputRegistry)/ace-keda-demo:$TAG"
        date
      volumeMounts:
        - mountPath: /work
          name: work
  volumes:
    - name: work
      emptyDir: {}
